#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>
#include <math.h>

__global__ void scaled_residual_add_kernel(const float* y_linear, const float* y_linear_detached, float* output, int size, float scaling_factor) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < size) {
        float y_lin = y_linear[idx];
        float y_lin_detached = y_linear_detached[idx];
        output[idx] = scaling_factor * y_lin + y_lin_detached;
    }
}

int main() {
    // Define dimensions
    const int batch_size = 1024;
    const int features = 1024;
    const int total_size = batch_size * features;
    const float scaling_factor = 0.5f;  // Example scaling factor
    size_t bytes = total_size * sizeof(float);

    // Allocate host memory
    float *h_y_linear = (float*)malloc(bytes);
    float *h_y_linear_detached = (float*)malloc(bytes);
    float *h_output = (float*)malloc(bytes);

    // Initialize input data
    // For demonstration: y_linear = [1.0, 1.0, ..., 1.0]
    // Expected result: output[i] = y_linear[i] * scaling_factor + y_linear_detached[i]
    //                            = 1.0 * 0.5 + 1.0 = 1.5
    for (int i = 0; i < total_size; ++i) {
        h_y_linear[i] = 1.0f;
        h_y_linear_detached[i] = 1.0f;
    }

    // Allocate device memory
    float *d_y_linear, *d_y_linear_detached, *d_output;
    cudaMalloc(&d_y_linear, bytes);
    cudaMalloc(&d_y_linear_detached, bytes);
    cudaMalloc(&d_output, bytes);

    // Copy data from host to device
    cudaMemcpy(d_y_linear, h_y_linear, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d_y_linear_detached, h_y_linear_detached, bytes, cudaMemcpyHostToDevice);

    // Define block and grid dimensions
    int block_size = 256;  // Threads per block
    int grid_size = (total_size + block_size - 1) / block_size;

    // Create CUDA events for timing
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);

    // Record start time
    cudaEventRecord(start);

    // Launch the kernel
    scaled_residual_add_kernel<<<grid_size, block_size>>>(
        d_y_linear,
        d_y_linear_detached,
        d_output,
        total_size,
        scaling_factor
    );

    // Record stop time
    cudaEventRecord(stop);
    cudaEventSynchronize(stop);

    // Calculate elapsed time
    float milliseconds = 0;
    cudaEventElapsedTime(&milliseconds, start, stop);
    printf("Kernel execution time: %f ms\n", milliseconds);

    // Copy result back to host
    cudaMemcpy(h_output, d_output, bytes, cudaMemcpyDeviceToHost);

    // Verify the result
    bool error = false;
    for (int i = 0; i < total_size; ++i) {
        float expected = h_y_linear[i] * scaling_factor + h_y_linear_detached[i];
        if (fabs(h_output[i] - expected) > 1e-5) {
            error = true;
            printf("Error at index %d: Expected %f, got %f\n", i, expected, h_output[i]);
            break;
        }
    }

    if (error)
        printf("Error: Scaled residual add result is incorrect.\n");
    else
        printf("Success: Scaled residual add result is correct.\n");

    // Clean up
    cudaEventDestroy(start);
    cudaEventDestroy(stop);
    
    cudaFree(d_y_linear);
    cudaFree(d_y_linear_detached);
    cudaFree(d_output);

    free(h_y_linear);
    free(h_y_linear_detached);
    free(h_output);

    return 0;
}