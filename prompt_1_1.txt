Create an optimized CUDA kernel implementation that:
1. Maximizes performance
2. Uses efficient memory access patterns
3. Properly handles all edge cases
4. Is compilable and functional

For this pytorch function (Only output the code, no explanations needed):

def forward(self, A: torch.Tensor, B: torch.Tensor) -> torch.Tensor:
    """
    Performs the matrix multiplication.

    Args:
        A (torch.Tensor): Input matrix A of shape (N, N).
        B (torch.Tensor): Input matrix B of shape (N, N).

    Returns:
        torch.Tensor: Output matrix C of shape (N, N).
    """
    return torch.matmul(A, B)

C code begins:

#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>
#include <math.h>

__global__ void matrix_multiply_kernel(const float* A, const float* B, float* C, int N) {
    // implement this
}

// usage:
int main() {
    // Define matrix dimensions (square matrices of size N x N)
    const int N = 1024;
    size_t bytes = N * N * sizeof(float);

    // Allocate host memory
    float *h_A = (float*)malloc(bytes);
    float *h_B = (float*)malloc(bytes);
    float *h_C = (float*)malloc(bytes);

    // Initialize matrices A and B
    // For demonstration, we fill A with 1.0f and B with 2.0f.
    // This means each element of C should be 1.0f * 2.0f * N = 2*N.
    for (int i = 0; i < N * N; ++i) {
        h_A[i] = 1.0f;
        h_B[i] = 2.0f;
    }

    // Allocate device memory
    float *d_A, *d_B, *d_C;
    cudaMalloc(&d_A, bytes);
    cudaMalloc(&d_B, bytes);
    cudaMalloc(&d_C, bytes);

    // Copy matrices from host to device
    cudaMemcpy(d_A, h_A, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, bytes, cudaMemcpyHostToDevice);

    // Define block and grid dimensions
    dim3 block(TILE_SIZE, TILE_SIZE);
    dim3 grid((N + TILE_SIZE - 1) / TILE_SIZE, (N + TILE_SIZE - 1) / TILE_SIZE);

    // Launch the kernel
    matrix_multiply_kernel<<<grid, block>>>(d_A, d_B, d_C, N);

    // Wait for GPU to finish before accessing on host
    cudaDeviceSynchronize();

    // Copy the result matrix from device to host
    cudaMemcpy(h_C, d_C, bytes, cudaMemcpyDeviceToHost);

    // Verify the result
    // Expected value: each element of C should be 2*N (i.e. sum of N multiplications 1.0*2.0)
    bool error = false;
    for (int i = 0; i < N * N; ++i) {
        if (fabs(h_C[i] - 2.0f * N) > 1e-5) {
            error = true;
            break;
        }
    }
    
    if (error)
        printf("Error: Matrix multiplication result is incorrect.\n");
    else
        printf("Success: Matrix multiplication result is correct.\n");

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    // Free host memory
    free(h_A);
    free(h_B);
    free(h_C);

    return 0;
}